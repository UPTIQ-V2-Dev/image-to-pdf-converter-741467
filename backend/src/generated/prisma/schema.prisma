// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  name              String?
  password          String
  role              Role               @default(USER)
  isEmailVerified   Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  Token             Token[]
  conversionJobs    ConversionJob[]
  conversionHistory ConversionHistory?
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

model ConversionJob {
  id          String            @id @default(cuid())
  user        User              @relation(fields: [userId], references: [id])
  userId      Int
  status      String            @default("idle")
  images      ConversionImage[]
  settings    Json
  createdAt   DateTime          @default(now())
  completedAt DateTime?
  filename    String?
  fileSize    Int?
  downloadUrl String?
  error       String?
}

model ConversionImage {
  id              String        @id @default(cuid())
  conversionJob   ConversionJob @relation(fields: [conversionJobId], references: [id])
  conversionJobId String
  originalName    String
  fileName        String
  fileSize        Int
  mimeType        String
  width           Int?
  height          Int?
  storageUrl      String
  createdAt       DateTime      @default(now())
}

model ConversionHistory {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @unique
  totalJobs   Int       @default(0)
  successJobs Int       @default(0)
  failedJobs  Int       @default(0)
  lastJobDate DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
